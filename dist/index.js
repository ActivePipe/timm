// Generated by CoffeeScript 1.10.0
(function() {
  var _clone, addDefaults, addFirst, addLast, merge, removeAt, replaceAt, set, setIn;

  addLast = function(array, val) {
    return array.concat([val]);
  };

  addFirst = function(array, val) {
    return [val].concat(array);
  };

  removeAt = function(array, idx) {
    return array.slice(0, idx).concat(array.slice(idx + 1));
  };

  replaceAt = function(array, idx, newItem) {
    if (array[idx] === newItem) {
      return array;
    }
    return array.slice(0, idx).concat([newItem]).concat(array.slice(idx + 1));
  };

  set = function(obj, key, val) {
    var obj2;
    if (obj[key] === val) {
      return obj;
    }
    obj2 = _clone(obj);
    obj2[key] = val;
    return obj2;
  };

  setIn = function(obj, path, val, idx) {
    var key, newValue;
    if (idx == null) {
      idx = 0;
    }
    key = path[idx];
    if (idx === path.length - 1) {
      newValue = val;
    } else {
      newValue = setIn(obj[key], path, val, idx + 1);
    }
    return set(obj, key, newValue);
  };

  merge = function(obj1, obj2) {
    var i, key, keys2, len, out;
    if (obj1 == null) {
      throw new Error("Trying to merge a null or undefined object");
    }
    if (obj2 == null) {
      return obj1;
    }
    keys2 = Object.keys(obj2);
    if (!keys2.length) {
      return obj1;
    }
    out = null;
    for (i = 0, len = keys2.length; i < len; i++) {
      key = keys2[i];
      if (obj1[key] !== obj2[key]) {
        if (!out) {
          out = _clone(obj1);
        }
        out[key] = obj2[key];
      }
    }
    if (!out) {
      out = obj1;
    }
    return out;
  };

  addDefaults = function(obj, defaults) {
    var i, key, keys, len, out, val;
    if (obj == null) {
      throw new Error("Trying to merge a null or undefined object");
    }
    if (defaults == null) {
      return obj;
    }
    keys = Object.keys(defaults);
    if (!keys.length) {
      return obj;
    }
    out = null;
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      if (obj[key] === void 0) {
        val = defaults[key];
        if (val === void 0) {
          continue;
        }
        if (!out) {
          out = _clone(obj);
        }
        out[key] = val;
      }
    }
    if (!out) {
      out = obj;
    }
    return out;
  };

  _clone = function(obj) {
    var i, key, keys, len, out;
    keys = Object.keys(obj);
    out = {};
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      out[key] = obj[key];
    }
    return out;
  };

  module.exports = {
    addLast: addLast,
    addFirst: addFirst,
    removeAt: removeAt,
    replaceAt: replaceAt,
    merge: merge,
    addDefaults: addDefaults,
    set: set,
    setIn: setIn
  };

}).call(this);
