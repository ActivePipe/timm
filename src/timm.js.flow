// @flow

type ArrayOrObject = Array<any>|Object;
type Key = number|string;

declare export function clone(obj: ArrayOrObject): Object;
declare export function addLast(array: Array<any>, val: Array<any>|any): Array<any>;
declare export function addFirst(array: Array<any>, val: Array<any>|any): Array<any>;
declare export function insert(array: Array<any>, idx: number, val: Array<any>|any): Array<any>;
declare export function removeAt(array: Array<any>, idx: number): Array<any>;
declare export function replaceAt(array: Array<any>, idx: number, newItem: any): Array<any>;
declare export function getIn(
  obj: ?ArrayOrObject,
  path: Array<Key>
): any;
declare export function set(obj: any, key: Key, val: any): Object;
declare export function setIn(obj: ArrayOrObject, path: Array<Key>, val: any): Object;
declare export function updateIn(
  obj: ArrayOrObject, path: Array<Key>,
  fnUpdate: (prevValue: any) => any
): Object;
declare export function merge(
  a: ArrayOrObject,
  b: ?ArrayOrObject, c: ?ArrayOrObject,
  d: ?ArrayOrObject, e: ?ArrayOrObject,
  f: ?ArrayOrObject, ...rest: Array<?ArrayOrObject>
): Object;
declare export function mergeIn(
  a: ArrayOrObject, path: Array<Key>,
  b: ?ArrayOrObject, c: ?ArrayOrObject,
  d: ?ArrayOrObject, e: ?ArrayOrObject,
  f: ?ArrayOrObject, ...rest: Array<?ArrayOrObject>
): Object;
declare export function omit(obj: Object, attrs: Array<string>|string): Object;
declare export function addDefaults(
  a: ArrayOrObject,
  b: ?ArrayOrObject, c: ?ArrayOrObject,
  d: ?ArrayOrObject, e: ?ArrayOrObject,
  f: ?ArrayOrObject, ...rest: Array<?ArrayOrObject>
): Object;

// Convenience default export
declare export default {
  clone: typeof clone,
  addLast: typeof addLast,
  addFirst: typeof addFirst,
  insert: typeof insert,
  removeAt: typeof removeAt,
  replaceAt: typeof replaceAt,
  getIn: typeof getIn,
  set: typeof set,
  setIn: typeof setIn,
  updateIn: typeof updateIn,
  merge: typeof merge,
  mergeIn: typeof mergeIn,
  omit: typeof omit,
  addDefaults: typeof addDefaults,
};
