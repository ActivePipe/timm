declare module 'timm' {
  declare type ArrayOrObject = Array<any>|Object;
  declare type Key = number|string;

  declare module.exports: {
    clone(obj: ArrayOrObject): ArrayOrObject;
    addLast(array: Array<any>, val: Array<any>|any): Array<any>;
    addFirst(array: Array<any>, val: Array<any>|any): Array<any>;
    insert(array: Array<any>, idx: number, val: Array<any>|any): Array<any>;
    removeAt(array: Array<any>, idx: number): Array<any>;
    replaceAt(array: Array<any>, idx: number, newItem: any): Array<any>;
    getIn(
      obj: ?ArrayOrObject,
      path: Array<Key>
    ): any;
    set(obj: any, key: Key, val: any): ArrayOrObject;
    setIn(obj: ArrayOrObject, path: Array<Key>, val: any): ArrayOrObject;
    updateIn(
      obj: ArrayOrObject, path: Array<Key>,
      fnUpdate: (prevValue: any) => any
    ): ArrayOrObject;
    merge(
      a: ArrayOrObject,
      b: ?ArrayOrObject, c: ?ArrayOrObject,
      d: ?ArrayOrObject, e: ?ArrayOrObject,
      f: ?ArrayOrObject, ...rest: Array<?ArrayOrObject>
    ): ArrayOrObject;
    mergeIn(
      a: ArrayOrObject, path: Array<Key>,
      b: ?ArrayOrObject, c: ?ArrayOrObject,
      d: ?ArrayOrObject, e: ?ArrayOrObject,
      f: ?ArrayOrObject, ...rest: Array<?ArrayOrObject>
    ): ArrayOrObject;
    omit(obj: Object, attrs: Array<string>|string): Object;
    addDefaults(
      a: ArrayOrObject,
      b: ?ArrayOrObject, c: ?ArrayOrObject,
      d: ?ArrayOrObject, e: ?ArrayOrObject,
      f: ?ArrayOrObject, ...rest: Array<?ArrayOrObject>
    ): ArrayOrObject;
  }
}
